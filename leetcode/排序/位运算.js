// // 十进制转二进制

// 6 = 4 + 2  // 110

// // 左移

// 10 << 1 ===> 20
// // 将二进制全部左移，然后补全右边空出来的一项
// 2^3 * 1 + 2^2 * 0 + 2^1 * 1 + 2^0 * 0

// // 10100  20

// // 右移
// // 将二进制全部右移，然后移除后右边多出来的一项
// // 1010     101


// // 按位操作

//     // 按位与 &
//     8 & 7  =》 0000
//     1000   0111  
//     // 每一位都是1，结果才是1

//     // 按位或 |
//     // 8 | 7 =》 15
//     1000 0111   1111
//     // 存在一位是1，结果就是1

//     // 按位异或 ^
//     8 ^ 7  => 15

//     // 每一位都不同，结果才为1



// // 两数不使用四则运算得出和
// // 8 ^ 8  => 0

// // a + b = (a ^ b) + ((a & b) << 1)

function sum(a, b) {
  if (a === 0) return b 
  if (b === 0) return a
  let newA = a ^ b // 15 10
  let newB = (a & b) << 1 
  return sum(newA, newB)
}
console.log(sum(9 ,3))
// 1001  0011  00010